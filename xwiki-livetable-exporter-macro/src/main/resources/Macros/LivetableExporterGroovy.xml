<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Macros.LivetableExporterGroovy" locale="">
  <web>Macros</web>
  <name>LivetableExporterGroovy</name>
  <parent>LivetableExporterMacro</parent>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1577833200000</creationDate>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1577833200000</date>
  <contentUpdateDate>1577833200000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>import org.xwiki.environment.Environment;
import org.apache.commons.io.FileUtils;

public class WriteFileGroovy {

  public getFile(name, services, xcontext) {
    def dirName = services.component.getInstance(Environment.class).getTemporaryDirectory();
    // contextualize the paths used by this service to the current user, or guest otherwise
    String username = "XWiki.XWikiGuest";
    def currentUserRef = xcontext.getUserReference();
    if (currentUserRef != null) {
      username = services.model.serialize(currentUserRef, 'default');
    }
    // hash the user reference in the path, to avoid any problems with the special characters in the user reference
    File dir = new File(dirName, "livetableexport/" + username.hashCode());
    if (!dir.exists()) {
      dir.mkdirs();
    }

    return new File(dir, name);
  }

  public writeFile(bytes, name, services, xcontext) {
    // check rights of the caller script author to execute this operation, if it's not a programming script, don't allow access to files
    if (!xcontext.hasProgrammingRights()) {
      services.logging.getLogger(this.getClass().getName()).warn("An attempt to access function writeFile was done with a user without hasProgrammingRights");
      return;
    }
    def file = getFile(name, services, xcontext);
    try {
      FileUtils.writeByteArrayToFile(file, bytes)
    } catch (e) {
      e.printStackTrace();
      return -1;
    }
    return 0;
  }

  public downloadFile(name, services, fileName, xcontext) {
    // check rights of the caller script author to execute this operation, if it's not a programming script, don't allow access to files
    if (!xcontext.hasProgrammingRights()) {
      services.logging.getLogger(this.getClass().getName()).warn("An attempt to access function downloadFile was done with a user without hasProgrammingRights");
      return;
    }
    // if the right is there, proceed with fetching the file and downloading it
    try {
      def response = xcontext.response
      def file = getFile(name, services, xcontext);
      if (!file.exists()) {
        return services.localization.render('xwiki.macro.livetableExporter.async.filemissing', [name]);
      }
      def bytes = FileUtils.readFileToByteArray(file);
      response.setContentType("application/ms-excel")
      if (fileName == null) {
        filename = "livetable.xls"
      }
      def contentHeader = 'inline; filename="' + fileName + '"'
      response.setHeader("Content-Disposition", contentHeader)
      response.setHeader("Cache-Control", 'private')
      response.setHeader("Pragma", 'cache')
      def expires = (new Date()).getTime()
      expires = expires+120000
      response.setDateHeader("Expires", expires)
      response.getOutputStream().write(bytes)
      xcontext.setFinished(true)
    } catch (e) {
      e.printStackTrace();
      return e.getMessage();
    }
  }
}
</content>
</xwikidoc>
